version: '3'
services:
  #postgres database

  db-accommodation:
    container_name: db-accommodation
    image: postgres:15.2
    restart: unless-stopped
    environment:
      POSTGRES_DB: accommodation_db
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 12345
    ports:
      - 5435:5435
    expose:
      - 5435
    command: -p 5435

  db-book:
    container_name: db-book
    image: postgres:15.2
    restart: unless-stopped
    environment:
      POSTGRES_DB: book_db
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 12345
    ports:
      - 5434:5434
    expose:
      - 5434
    command: -p 5434

  db-destiny:
    container_name: db-destiny
    image: postgres:15.2
    restart: unless-stopped
    environment:
      POSTGRES_DB: destiny_db
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 12345
    ports:
      - 5433:5433
    expose:
      - 5433
    command: -p 5433

  db-fly:
    container_name: db-fly
    image: postgres:15.2
    restart: unless-stopped
    environment:
      POSTGRES_DB: fly_db
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 12345
    ports:
      - 5432:5432
    expose:
      - 5432
    command: -p 5432

  db-user:
    container_name: db-user
    image: postgres:15.2
    restart: unless-stopped
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 12345
    ports:
      - 5431:5431
    expose:
      - 5431
    command: -p 5431

  eureka-server:
    image: bib_eureka
    build: ./eureka-server
    restart: always
    ports:
      - "8761:8761"

  gateway:
    image: bib_gateway
    build: ./api-gateway
    restart: always
    depends_on:
      - eureka-server
    ports:
      - "8081:8081"
    environment:
      spring.security.oauth2.resourceserver.jwt.issuer-uri=http: //keycloak:8080/realms/tutorial-api
      spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http: //keycloak:8080/realms/tutorial-api/protocol/openid-connect/certs
      eureka.client.service-url.defaultZone: http://eureka-server:8761/eureka
    links:
      - eureka-server

  accommodation:
    image: bib_accommodation
    build: ./accommodation-service
    restart: always
    depends_on:
      - db-accommodation
      - eureka-server
    environment:
      spring.datasource.url: jdbc:mysql://accommodation_db:5435/accommodation?createDatabaseIfNotExist=true
      spring.datasource.username: root
      spring.datasource.password: 12345
      eureka.client.service-url.defaultZone: http://eureka-server:8761/eureka

  book:
    image: bib_book
    build: ./book-service
    restart: always
    depends_on:
      - db-book
      - eureka-server
    environment:
      spring.datasource.url: jdbc:mysql://book_db:5434/book?createDatabaseIfNotExist=true
      spring.datasource.username: root
      spring.datasource.password: 12345
      eureka.client.service-url.defaultZone: http://eureka-server:8761/eureka

  destiny:
    image: bib_destiny
    build: ./destiny-service
    restart: always
    depends_on:
      - db-destiny
      - eureka-server
    environment:
      spring.datasource.url: jdbc:mysql://destiny_db:5433/destiny?createDatabaseIfNotExist=true
      spring.datasource.username: root
      spring.datasource.password: 12345
      eureka.client.service-url.defaultZone: http://eureka-server:8761/eureka

  fly:
    image: bib_fly
    build: ./fly-service
    restart: always
    depends_on:
      - db-fly
      - eureka-server
    environment:
      spring.datasource.url: jdbc:mysql://fly_db:5432/fly?createDatabaseIfNotExist=true
      spring.datasource.username: root
      spring.datasource.password: 12345
      eureka.client.service-url.defaultZone: http://eureka-server:8761/eureka

  user:
    image: bib_user
    build: ./user-service
    restart: always
    depends_on:
      - db-user
      - eureka-server
    environment:
      spring.datasource.url: jdbc:mysql://user_db:5431/user?createDatabaseIfNotExist=true
      spring.datasource.username: root
      spring.datasource.password: 12345
      eureka.client.service-url.defaultZone: http://eureka-server:8761/eureka
